_______________________________________Принципы SOLID в Java
SOLID — это акроним, образованный из заглавных букв первых пяти принципов ООП и проектирования. Принципы придумал
Роберт Мартин в начале двухтысячных, а аббревиатуру позже ввел в обиход Майкл Фэзерс.

Вот что входит в принципы SOLID:
-- Single Responsibility Principle (Принцип единственной ответственности).
-- Open Closed Principle (Принцип открытости/закрытости).
-- Liskov’s Substitution Principle (Принцип подстановки Барбары Лисков).
-- Interface Segregation Principle (Принцип разделения интерфейса).
-- Dependency Inversion Principle (Принцип инверсии зависимостей).

_______________________________________Принцип единственной ответственности (SRP):
Данный принцип гласит: никогда не должно быть больше одной причины изменить класс.

На каждый объект возлагается одна обязанность, полностью инкапсулированная в класс. Все сервисы класса направлены на
обеспечение этой обязанности.

Такие классы всегда будет просто изменять, если это понадобится, потому что понятно, за что класс отвечает, а за что —
нет. То есть можно будет вносить изменения и не бояться последствий — влияния на другие объекты. А еще подобный код
гораздо проще тестировать, ведь вы покрываете тестами одну функциональность в изоляции от всех остальных.

_______________________________________Принцип открытости/закрытости (OCP)
Этот принцип емко описывают так: программные сущности (классы, модули, функции и т.п.) должны быть открыты для
расширения, но закрыты для изменения.

Это означает, что должна быть возможность изменять внешнее поведение класса, не внося физические изменения в сам класс.
Следуя этому принципу, классы разрабатываются так, чтобы для подстройки класса к конкретным условиям применения было
достаточно расширить его и переопределить некоторые функции.

Поэтому система должна быть гибкой, с возможностью работы в переменных условиях без изменения исходного кода.

_______________________________________Принцип подстановки Барбары Лисков (LSP)
Это вариация принципа открытости/закрытости, о котором говорилось ранее. Его можно описать так: объекты в программе
можно заменить их наследниками без изменения свойств программы.

Это означает, что класс, разработанный путем расширения на основании базового класса, должен переопределять его методы
так, чтобы не нарушалась функциональность с точки зрения клиента. То есть, если разработчик расширяет ваш класс и
использует его в приложении, он не должен изменять ожидаемое поведение переопределенных методов.

Подклассы должны переопределять методы базового класса так, чтобы не нарушалась функциональность с точки зрения клиента.

_______________________________________Принцип разделения интерфейса (ISP)
Характеризуется следующим утверждением: клиенты не должны быть вынуждены реализовывать методы, которые они не будут
использовать.

Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять на более мелкие и
специфические, чтобы клиенты мелких интерфейсов знали только о методах, необходимых в работе. В итоге, при изменении
метода интерфейса не должны меняться клиенты, которые этот метод не используют.

_______________________________________Принцип инверсии зависимостей (DIP)
Этот принцип SOLID в Java описывают так: зависимости внутри системы строятся на основе абстракций. Модули верхнего
уровня не зависят от модулей нижнего уровня. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.

Программное обеспечение нужно разрабатывать так, чтобы различные модули были автономными и соединялись друг с другом
с помощью абстракции.

Классическое применение этого принципа — Spring framework. В рамках Spring framework все модули выполнены в виде
отдельных компонентов, которые могут работать вместе. Они настолько автономны, что могут быть быть с такой же легкостью
задействованы в других программных модулях помимо Spring framework.

Это достигнуто за счет зависимости закрытых и открытых принципов. Все модули предоставляют доступ только к абстракции,
которая может использоваться в другом модуле.